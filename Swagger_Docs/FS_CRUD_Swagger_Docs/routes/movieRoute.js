const express = require("express")
const {MovieModel} = require("../models/movieModel")

const movieRouter = express.Router()

//YAML
/**
 * @swagger
 *  components:
 *      schemas:
 *          Movie:
 *              type: object
 *              properties:
 *                  id:
 *                      type: string
 *                      description: The unique Id generated by MongoDB.
 *                  title:
 *                      type: string
 *                      description: Title of the movie.
 *                  year:
 *                      type: number
 *                      description: Released year of movie.
 *                      example: 1900
 *                  genre:
 *                      type: string
 *                      example: Drama/Sci-fi/Horror
 */

/**
 * @swagger
 *  tags: 
 *      name: Movies
 *      description: All the API routes to Movies.
 */

// Create Movie

/**
 * @swagger:
 * /movie/create:
 *      post:
 *          summary: Add a new movie to Database.
 *          tags: [Movies]
 *          requestBody:
 *              required: true
 *              content: 
 *                  application/json:
 *                      schema:
 *                          $ref: "#/components/schemas/Movie"
 *          responses:
 *              '200':
 *                  description: The movie has been added Successfully.
 *              '400':
 *                  description: Something went wrong.
 */
movieRouter.post("/create", async(req, res)=>{
    try {
        const movie = new MovieModel(req.body)
        await movie.save()
        res.status(200).send({"msg":"Movie Added Successfully"})
    } catch (error) {
        res.status(400).send({"Error":error})
    }
})

// Read Movie
/**
 * @swagger
 * /movie:
 *  get:
 *      summary: Get all the movie data from database.
 *      tags: [Movies]
 *      responses:
 *          '200':
 *              description: The list of all movies.
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: "#/componente/schemas/Movie"
 */
movieRouter.get("/", async(req, res)=>{
    try {
        const movie = await MovieModel.find()
        res.send({"Movies":movie})
    } catch (error) {
        res.send({"Error":error})
    }
})

// Update Movie By _id
/**
 * @swagger
 * /movie/update/{id}:
 *  patch:
 *      summary: Update the details of a movie.
 *      tags: [Movies]
 *      parameters:
 *          - in: path
 *            name: id
 *            schema:
 *                  type: string
 *            required: true
 *            description: Mongo ID of a particular Movie.
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: "#/components/schemas/Movie"
 *      responses:
 *          '200':
 *              description: Movie has been updated Successfully.
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: "#/components/schemas/Movie"
 *          '400':
 *              description: Something went wrong.
 */

movieRouter.patch("/update/:movieID", async(req, res)=>{
    const {movieID} = req.params
    try {
        await MovieModel.findByIdAndUpdate({_id:movieID}, req.body)
        res.send({"msg":`movie id ${movieID} has been updated`})
    } catch (error) {
        res.send(error)
    }
})

// Delete Movie By _id
/**
 * @swagger
 * /movie/delete/{id}:
 *  delete:
 *      summary: Delete a movie from database.
 *      tags: [Movies]
 *      parameters:
 *          - in: path
 *            name: id
 *            schema:
 *                  type: string
 *            required: true
 *            description: Mongo ID of a particular Movie.
 *      responses:
 *          '200':
 *              description: Movie has been deleted Successfully.
 *          '400':
 *              description: Something went wrong.
 */

movieRouter.delete("/delete/:movieID", async(req, res)=>{
    const {movieID} = req.params
    try {
        await MovieModel.findByIdAndDelete({_id:movieID}, req.body)
        res.send({"msg":`movie id ${movieID} has been deleted`})
    } catch (error) {
        res.send(error)
    }
})

module.exports = {movieRouter}